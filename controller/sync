#!/usr/bin/env bash
IFS=$'\n'
WORKDIR=$(pwd)

printf "Sync...\n" >&2

REQUEST=$(cat)
printf "Request: %s\n" "$(printf "%s" "${REQUEST}" | jq -c)" >&2

token="$(cat /grafana_api/token)"
host="${GRAFANA_HOST}"

name=$(yq e "[.parent.metadata.namespace,.parent.metadata.name]|join(\"/\")" <(printf "%s" "${REQUEST}"))
dashboardsJson=$(yq e -o=json -I0 ".parent.spec.dashboards.[]" <(printf "%s" "${REQUEST}"))
dashboardJson=$(yq e -o=json -I0 ".parent.spec.dashboard" <(printf "%s" "${REQUEST}"))
grafonnetFiles=$(yq e -o=json -I0 ".parent.spec.grafonnet | to_entries | .[]" <(printf "%s" "${REQUEST}"))

grafonnetDir=$(mktemp -d -p /grafonnet_tmp)
ln -s /grafonnet_tmp/vendor/ ${grafonnetDir}/vendor
cd ${grafonnetDir}

for grafonnetFile in ${grafonnetFiles}; do
  grafonnetFileName=$(yq e ".key" <(printf "%s" "${grafonnetFile}"))
  grafonnetFileContent=$(yq e ".value" <(printf "%s" "${grafonnetFile}"))
  printf "%s" "${grafonnetFileContent}" > "${grafonnetFileName}"
done

grafonnetDashboards=();
for jsonnet in $(ls . | grep .jsonnet); do
  grafonnetDashboards+=($(jsonnet ${jsonnet} | yq e -o=json -I0 -))
done

cd ${WORKDIR}
rm -rf grafonnetDir

uids=""
hashes="{}"

for dashboard in ${dashboardsJson} ${grafonnetDashboards[@]} ${dashboardJson}; do
  if [ "${dashboard}" != "null" ]
  then
    folder=$(yq e ".folder" <(printf "%s" "${dashboard}"))
    title=$(yq e ".dashboard.title" <(printf "%s" "${dashboard}"))
    if [ "${folder}" != "null" ]
    then
      encodedFolder=$(printf "%s" "${folder}" | jq -sRr @uri)
      folderId=$(curl -k --silent -H 'Content-Type: application/json' -H "Authorization: Bearer ${token}" "${host}/api/search?type=dash-folder&limit=1&query=${encodedFolder}" | yq e ".[0].id" -)
      if [ "${folderId}" == "null" ]
      then
        folderId=$(curl -k --silent -H 'Content-Type: application/json' -H "Authorization: Bearer ${token}" -d "{\"title\":\"${folder}\"}" "${host}/api/folders" | yq e .id -)
      fi
      dashboard=$(yq e -o=json -I0 ".folderId = ${folderId}" <(printf "%s" "${dashboard}"))
    fi

    key=$(printf "%s" "${folder} ${title}" | sed s/\\s/_/g)
    existing_hash=$(yq e ".parent.status.lastDeploy[\"${key}\"]" <(printf '%s' "${REQUEST}"))
    new_hash=$(printf "%s" "${dashboard}" | md5sum | tr -d ' -')
    hashes=$(yq e -I0 -o=json ".[\"${key}\"]=\"${new_hash}\"" <(printf "%s" "${hashes}"))

    if [ "${new_hash}" != "${existing_hash}" ]
    then
      out=$(mktemp)
      err=$(mktemp)
      trap "rm -f $out $err" EXIT

      curl -k --silent -H 'Content-Type: application/json' -H "Authorization: Bearer ${token}" -d "${dashboard}" "${host}/api/dashboards/db" -w "\n%{http_code}" 1>$out 2>$err

      res=$(<$out)
      body=$(printf "%s" "${res}" | head -n -1)
      status=$(printf "%s" "${res}" | tail -n 1)
      if [ "${status}" == "200" ]
      then
        uid=$(printf "%s" "${body}" | yq e .uid -)
        uids=${uids}'"'${uid}'",'
      else
        printf "Failed updating dashboard '%s': status-code=%s message=%s err=%s" ${name} ${status} ${body} $(<$err) >&2
        printf "Content-type: text/plain\n\n"
        printf "%s" "$(<$err)"
        exit 1
      fi
    fi
  fi
done

uids="["${uids%?}"]"

RESPONSE=$(jsonnet sync.jsonnet --tla-str now=$(date --iso-8601=ns) --tla-code-file hashes=<(printf "%s" "${hashes}") --tla-code-file uids=<(printf "%s" "${uids}") --tla-code-file request=<(printf "%s" "${REQUEST}" 2>/dev/null) | jq -c)
printf "Response: %s\n" "${RESPONSE}" >&2

printf "Content-type: application/json\n\n"
printf "%s" "${RESPONSE}"
